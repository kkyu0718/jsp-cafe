name: Deploy to EC2

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER}}
          key: ${{ secrets.SSH_KEY }}
          script: |
            set -e  # 오류 발생 시 스크립트 중단
            echo "Checking current swap memory..."
            free -h
            swapon --show

            # 원하는 스왑 크기 
            DESIRED_SWAP_SIZE=10G

            # 현재 스왑 크기 확인
            CURRENT_SWAP_SIZE=$(free -g | awk '/Swap:/ { print $2 }')

            if [ "$CURRENT_SWAP_SIZE" -lt "${DESIRED_SWAP_SIZE%G}" ]; then
              echo "Increasing swap size to $DESIRED_SWAP_SIZE..."
            
              # 기존 스왑 파일 비활성화 및 삭제
              sudo swapoff -a
              sudo rm -f /swapfile

              # 새 스왑 파일 생성
              sudo fallocate -l $DESIRED_SWAP_SIZE /swapfile
              sudo chmod 600 /swapfile
              sudo mkswap /swapfile
              sudo swapon /swapfile

              # /etc/fstab 업데이트 (이미 있다면 수정하지 않음)
              if ! grep -q "/swapfile none swap sw 0 0" /etc/fstab; then
                echo "/swapfile none swap sw 0 0" | sudo tee -a /etc/fstab
              fi

              echo "Swap size increased. New swap configuration:"
              free -h
              swapon --show
            else
              echo "Current swap size is sufficient."
            fi
            
            echo "Checking memory status..."
            free -h

            echo "Checking swap status..."
            swapon --show

            echo "Cleaning up system resources..."
            # 로그 파일 정리 (중요 시스템 로그 제외)
            sudo find /var/log -type f \( -name "*.log" -o -name "*.gz" \) \
              ! -name "auth.log" \
              ! -name "syslog" \
              ! -name "kern.log" \
              -delete

            # 빈 로그 디렉토리 정리
            sudo find /var/log -type d -empty -delete

            # 환경 변수 설정
            REPO_DIR=~/jsp-cafe
            BRANCH=main
            DOCKER_IMAGE=jsp-cafe:latest
            CONTAINER_PORT=8080

            echo "Cleaning up Docker resources..."
            sudo docker system prune -af --volumes || echo "Docker cleanup failed, but continuing..."

            echo "Stopping and removing existing containers..."
            CONTAINER_IDS=$(sudo docker ps -q --filter publish=$CONTAINER_PORT)
            if [ ! -z "$CONTAINER_IDS" ]; then
              sudo docker stop $CONTAINER_IDS
              sudo docker rm $CONTAINER_IDS
            else
              echo "No containers running on port $CONTAINER_PORT"
            fi

            echo "Updating or cloning repository..."
            if [ -d $REPO_DIR ]; then
              cd $REPO_DIR
              git fetch --all
              git reset --hard origin/$BRANCH
            else
              git clone https://github.com/kkyu0718/jsp-cafe.git $REPO_DIR
              cd $REPO_DIR
            fi
            
            git checkout $BRANCH
            git pull origin $BRANCH

            echo "Building Docker image..."
            sudo docker build --cache-from $DOCKER_IMAGE -t $DOCKER_IMAGE .

            echo "Running new container..."
            NEW_CONTAINER_ID=$(sudo docker run -d -p $CONTAINER_PORT:$CONTAINER_PORT --add-host=host.docker.internal:host-gateway $DOCKER_IMAGE)

            echo "New container ID: $NEW_CONTAINER_ID"
            
            # 새 컨테이너가 정상적으로 시작되었는지 확인
            if [ -z "$NEW_CONTAINER_ID" ]; then
              echo "Failed to start new container"
              exit 1
            fi

            echo "Deployment completed successfully"